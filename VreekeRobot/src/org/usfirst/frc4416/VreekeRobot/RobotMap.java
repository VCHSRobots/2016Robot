// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4416.VreekeRobot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainFrontRight;
    public static SpeedController driveTrainFrontLeft;
    public static SpeedController driveTrainRearLeft;
    public static SpeedController driveTrainRearRight;
    public static RobotDrive driveTrainRobotDrive4;
    public static SpeedController clawClawMotor;
    public static Encoder elevatorQuadratureEncoder1;
    public static SpeedController elevatorElevatorMotor;
    public static AnalogPotentiometer wristAnalogPotentiometer1;
    public static SpeedController wristWristMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainFrontRight = new Talon(0);
        LiveWindow.addActuator("Drive Train", "Front Right", (Talon) driveTrainFrontRight);
        
        driveTrainFrontLeft = new Talon(1);
        LiveWindow.addActuator("Drive Train", "Front Left", (Talon) driveTrainFrontLeft);
        
        driveTrainRearLeft = new Talon(2);
        LiveWindow.addActuator("Drive Train", "Rear Left", (Talon) driveTrainRearLeft);
        
        driveTrainRearRight = new Talon(3);
        LiveWindow.addActuator("Drive Train", "Rear Right", (Talon) driveTrainRearRight);
        
        driveTrainRobotDrive4 = new RobotDrive(driveTrainFrontRight, driveTrainFrontLeft,
              driveTrainRearLeft, driveTrainRearRight);
        
        driveTrainRobotDrive4.setSafetyEnabled(false);
        driveTrainRobotDrive4.setExpiration(0.1);
        driveTrainRobotDrive4.setSensitivity(0.5);
        driveTrainRobotDrive4.setMaxOutput(1.0);

        clawClawMotor = new Talon(4);
        LiveWindow.addActuator("Claw", "Claw Motor", (Talon) clawClawMotor);
        
        elevatorQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "Quadrature Encoder 1", elevatorQuadratureEncoder1);
        elevatorQuadratureEncoder1.setDistancePerPulse(1.0);
        elevatorQuadratureEncoder1.setPIDSourceParameter(PIDSourceParameter.kRate);
        elevatorElevatorMotor = new Talon(6);
        LiveWindow.addActuator("Elevator", "Elevator Motor", (Talon) elevatorElevatorMotor);
        
        wristAnalogPotentiometer1 = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("Wrist", "Analog Potentiometer 1", wristAnalogPotentiometer1);
        
        wristWristMotor = new Talon(5);
        LiveWindow.addActuator("Wrist", "Wrist Motor", (Talon) wristWristMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
