// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.Master2016;

import org.usfirst.frc4415.Master2016.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc4415.Master2016.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton driveTrainSetupButton;
    public JoystickButton driveTrainAlignButton;
    public JoystickButton bailbarUpButton;
    public JoystickButton bailbarDownButton;
    public JoystickButton bailbarInButton;
    public JoystickButton bailbarOutButton;
    public Joystick driverJoystick;
    public JoystickButton elevatorLimitLowButton;
    public JoystickButton elevatorLimitHighButton;
    public JoystickButton shooterShootOutButton;
    public JoystickButton shooterAccurateShootButton;
    public JoystickButton elevatorGateLowButton;
    public JoystickButton elevatorGateHighButton;
    public Joystick manipulatorGamePad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        manipulatorGamePad = new Joystick(1);
        
        elevatorGateHighButton = new JoystickButton(manipulatorGamePad, 3);
        elevatorGateHighButton.whenPressed(new ElevatorGateHigh());
        elevatorGateLowButton = new JoystickButton(manipulatorGamePad, 1);
        elevatorGateLowButton.whenPressed(new ElevatorGateLow());
        shooterAccurateShootButton = new JoystickButton(manipulatorGamePad, 5);
        shooterAccurateShootButton.whenPressed(new ShooterAccurateShoot());
        shooterShootOutButton = new JoystickButton(manipulatorGamePad, 6);
        shooterShootOutButton.whenPressed(new ShooterShootOut());
        elevatorLimitHighButton = new JoystickButton(manipulatorGamePad, 4);
        elevatorLimitHighButton.whenPressed(new ElevatorLimitHigh());
        elevatorLimitLowButton = new JoystickButton(manipulatorGamePad, 2);
        elevatorLimitLowButton.whenPressed(new ElevatorLimitLow());
        driverJoystick = new Joystick(0);
        
        bailbarOutButton = new JoystickButton(driverJoystick, 8);
        bailbarOutButton.whileHeld(new BailbarOut());
        bailbarInButton = new JoystickButton(driverJoystick, 10);
        bailbarInButton.whileHeld(new BailbarIn());
        bailbarDownButton = new JoystickButton(driverJoystick, 9);
        bailbarDownButton.whenPressed(new BailbarDown());
        bailbarUpButton = new JoystickButton(driverJoystick, 7);
        bailbarUpButton.whenPressed(new BailbarUp());
        driveTrainAlignButton = new JoystickButton(driverJoystick, 12);
        driveTrainAlignButton.whileHeld(new DriveTrainAlign());
        driveTrainSetupButton = new JoystickButton(driverJoystick, 11);
        driveTrainSetupButton.whileHeld(new DriveTrainSetup());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveTrain ArcadeDrive", new DriveTrainArcadeDrive());
        SmartDashboard.putData("DriveTrain Setup", new DriveTrainSetup());
        SmartDashboard.putData("DriveTrain Align", new DriveTrainAlign());
        SmartDashboard.putData("Bailbar Up", new BailbarUp());
        SmartDashboard.putData("Bailbar Down", new BailbarDown());
        SmartDashboard.putData("Bailbar In", new BailbarIn());
        SmartDashboard.putData("Bailbar Out", new BailbarOut());
        SmartDashboard.putData("Elevator Move", new ElevatorMove());
        SmartDashboard.putData("Elevator Limit Low", new ElevatorLimitLow());
        SmartDashboard.putData("Elevator Limit High", new ElevatorLimitHigh());
        SmartDashboard.putData("Elevator PortLow", new ElevatorPortLow());
        SmartDashboard.putData("Elevator PortHigh", new ElevatorPortHigh());
        SmartDashboard.putData("Elevator DrawLow", new ElevatorDrawLow());
        SmartDashboard.putData("Elevator DrawHigh", new ElevatorDrawHigh());
        SmartDashboard.putData("Elevator Sally", new ElevatorSally());
        SmartDashboard.putData("RetainingBar In", new RetainingBarIn());
        SmartDashboard.putData("RetainingBar Out", new RetainingBarOut());
        SmartDashboard.putData("Shooter Shoot Out", new ShooterShootOut());
        SmartDashboard.putData("Shooter AccurateShoot", new ShooterAccurateShoot());
        SmartDashboard.putData("Imaging Read", new ImagingRead());
        SmartDashboard.putData("Climber Grab", new ClimberGrab());
        SmartDashboard.putData("Climber Climb", new ClimberClimb());
        SmartDashboard.putData("Select Gate", new SelectGate());
        SmartDashboard.putData("Elevator Gate Low", new ElevatorGateLow());
        SmartDashboard.putData("Elevator Gate High", new ElevatorGateHigh());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverJoystick() {
        return driverJoystick;
    }

    public Joystick getManipulatorGamePad() {
        return manipulatorGamePad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

