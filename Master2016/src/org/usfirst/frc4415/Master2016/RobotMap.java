// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4415.Master2016;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Solenoid;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveTrainCANTalonrightFront;
    public static CANTalon driveTrainCANTalonleftFront;
    public static CANTalon driveTrainCANTalonleftRear;
    public static CANTalon driveTrainCANTalonrightRear;
    public static Encoder driveTrainRightQuadratureEncoder;
    public static Encoder driveTrainLeftQuadratureEncoder;
    public static DigitalInput driveTrainUltrasonic;
    public static CANTalon bailbarCANTalon;
    public static Solenoid bailbarSolenoid1;
    public static Solenoid bailbarSolenoid2;
    public static CANTalon elevatorCANTalon;
    public static DigitalInput elevatorHighLimitSwitch;
    public static DigitalInput elevatorLowLimitSwitch;
    public static CANTalon retainingBarCANTalon;
    public static AnalogPotentiometer retainingBarAnalogPotentiometer;
    public static CANTalon shooterCANTalon;
    public static Encoder shooterQuadratureEncoder;
    public static DigitalInput shooterUltrasonic;
    public static CANTalon climberCANTalonGrab;
    public static CANTalon climberCANTalonClimb;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainCANTalonrightFront = new CANTalon(0);
        LiveWindow.addActuator("DriveTrain", "CAN Talon rightFront", driveTrainCANTalonrightFront);
        
        driveTrainCANTalonleftFront = new CANTalon(1);
        LiveWindow.addActuator("DriveTrain", "CAN Talon leftFront", driveTrainCANTalonleftFront);
        
        driveTrainCANTalonleftRear = new CANTalon(2);
        LiveWindow.addActuator("DriveTrain", "CAN Talon leftRear", driveTrainCANTalonleftRear);
        
        driveTrainCANTalonrightRear = new CANTalon(3);
        LiveWindow.addActuator("DriveTrain", "CAN Talon rightRear", driveTrainCANTalonrightRear);
        
        driveTrainRightQuadratureEncoder = new Encoder(1, 2, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Right Quadrature Encoder", driveTrainRightQuadratureEncoder);
        driveTrainRightQuadratureEncoder.setDistancePerPulse(1.0);
        driveTrainRightQuadratureEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainLeftQuadratureEncoder = new Encoder(3, 4, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Left Quadrature Encoder", driveTrainLeftQuadratureEncoder);
        driveTrainLeftQuadratureEncoder.setDistancePerPulse(1.0);
        driveTrainLeftQuadratureEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainUltrasonic = new DigitalInput(0);
        LiveWindow.addSensor("DriveTrain", "Ultrasonic", driveTrainUltrasonic);
        
        bailbarCANTalon = new CANTalon(4);
        LiveWindow.addActuator("Bailbar", "CAN Talon", bailbarCANTalon);
        
        bailbarSolenoid1 = new Solenoid(0, 0);
        LiveWindow.addActuator("Bailbar", "Solenoid 1", bailbarSolenoid1);
        
        bailbarSolenoid2 = new Solenoid(0, 1);
        LiveWindow.addActuator("Bailbar", "Solenoid 2", bailbarSolenoid2);
        
        elevatorCANTalon = new CANTalon(5);
        LiveWindow.addActuator("Elevator", "CAN Talon", elevatorCANTalon);
        
        elevatorHighLimitSwitch = new DigitalInput(5);
        LiveWindow.addSensor("Elevator", "High Limit Switch", elevatorHighLimitSwitch);
        
        elevatorLowLimitSwitch = new DigitalInput(6);
        LiveWindow.addSensor("Elevator", "Low Limit Switch", elevatorLowLimitSwitch);
        
        retainingBarCANTalon = new CANTalon(6);
        LiveWindow.addActuator("RetainingBar", "CAN Talon", retainingBarCANTalon);
        
        retainingBarAnalogPotentiometer = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("RetainingBar", "Analog Potentiometer", retainingBarAnalogPotentiometer);
        
        shooterCANTalon = new CANTalon(7);
        LiveWindow.addActuator("Shooter", "CAN Talon", shooterCANTalon);
        
        shooterQuadratureEncoder = new Encoder(8, 9, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "Quadrature Encoder", shooterQuadratureEncoder);
        shooterQuadratureEncoder.setDistancePerPulse(1.0);
        shooterQuadratureEncoder.setPIDSourceType(PIDSourceType.kRate);
        shooterUltrasonic = new DigitalInput(7);
        LiveWindow.addSensor("Shooter", "Ultrasonic", shooterUltrasonic);
        
        climberCANTalonGrab = new CANTalon(8);
        LiveWindow.addActuator("Climber", "CAN Talon Grab", climberCANTalonGrab);
        
        climberCANTalonClimb = new CANTalon(9);
        LiveWindow.addActuator("Climber", "CAN Talon Climb", climberCANTalonClimb);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
